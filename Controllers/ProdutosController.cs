using Asp.Versioning;using AutoMapper;using Microsoft.AspNetCore.Mvc;using Newtonsoft.Json;using WebApiCurso.DTOs;using WebApiCurso.Models;using WebApiCurso.Pagination;using WebApiCurso.Repositories.Interfaces;namespace WebApiCurso.Controllers;[Route("api/v{version:apiVersion}/[Controller]")][ApiController][ApiVersion("1")]public class ProdutosController : ControllerBase{    private readonly IUnityOfWork _uof;    private readonly IMapper _mapper;    public ProdutosController(IUnityOfWork uof, IMapper mapper)    {        _uof = uof;        _mapper = mapper;    }    private ActionResult<IEnumerable<ProdutoDTO>> ProdutosPorPagina(PagedList<Produto> produtos)    {        var metadata = new        {            produtos.TotalCount,            produtos.PageSize,            produtos.CurrentPage,            produtos.TotalPages,            produtos.HasNext,            produtos.HasPrevious        };        Response.Headers.Append("X-Pagination", JsonConvert.SerializeObject(metadata));        var produtosDto = _mapper.Map<IEnumerable<ProdutoDTO>>(produtos);        return Ok(produtosDto);    }    [HttpGet("produtosFiltroPreco")]    public async Task<ActionResult<IEnumerable<ProdutoDTO>>> GetFiltroPrecoProdutos(        [FromQuery] ProdutosFiltroPreco produtosFiltroPreco)    {        var produtos = await _uof.ProdutoRepository.GetProdutosFiltroPrecoAsync(produtosFiltroPreco);        return ProdutosPorPagina(produtos);    }    [HttpGet("pagination2")]    public async Task<ActionResult<IEnumerable<ProdutoDTO>>> GetProdutosPorPagina(        [FromQuery] ProdutosParameters produtosParameters)    {        var produtos = await _uof.ProdutoRepository.GetprodutosPorPaginaAsync(produtosParameters);        return ProdutosPorPagina(produtos);    }    [HttpGet]    public async Task<ActionResult<IEnumerable<ProdutoDTO>>> GetProdutos()    {        var produtos = await _uof.ProdutoRepository.GetAllAsync();        if (produtos is null)            throw new ArgumentNullException(nameof(produtos));        var produtosDto = _mapper.Map<IEnumerable<ProdutoDTO>>(produtos);        return Ok(produtosDto);    }    [HttpGet("{id:int:min(1)}", Name = "GetProdutoId")]    public async Task<ActionResult<ProdutoDTO>> GetProdutoId(int id)    {        var produto = await _uof.ProdutoRepository.GetAync(c => c.ProdutoId == id);        if (produto == null)        {            return NotFound();        }        var produtoDto = _mapper.Map<ProdutoDTO>(produto);        return Ok(produtoDto);    }    [HttpGet("pagination")]    public async Task<ActionResult<IEnumerable<ProdutoDTO>>> GetProdutosPagination(        [FromQuery] ProdutosParameters produtosParameters)    {        var produtos = await _uof.ProdutoRepository.GetProdutosPaginationAsync(produtosParameters);        var produtosDto = _mapper.Map<IEnumerable<ProdutoDTO>>(produtos);        return Ok(produtosDto);    }    [HttpPost]    public ActionResult<ProdutoDTO> PostProduto(Produto produto)    {        if (produto is null)            throw new ArgumentNullException(nameof(produto));        var novoProduto = _uof.ProdutoRepository.Create(produto);        _uof.Commit();        var novoProdutoDto = _mapper.Map<ProdutoDTO>(novoProduto);        return new CreatedAtRouteResult("GetProdutoId", new { id = novoProdutoDto.ProdutoId }, novoProdutoDto);    }    [HttpPut("{id:int:min(1)}")]    public ActionResult<ProdutoDTO> PutProduto(Produto produto, int id)    {        if (produto.ProdutoId != id)        {            return BadRequest();            }        _uof.ProdutoRepository.Update(produto);        _uof.Commit();        var produtoAtualizadoDto = _mapper.Map<ProdutoDTO>(produto);        return Ok(produtoAtualizadoDto);    }    [HttpDelete("{id:int:min(1)}")]    public async Task<IActionResult> DeleteProduto(int id)    {        var produto = await _uof.ProdutoRepository.GetAync(p => p.ProdutoId == id);        if (produto == null)        {            return NotFound();        }        _uof.ProdutoRepository.Delete(produto);        _uof.Commit();        return NoContent();    }   }